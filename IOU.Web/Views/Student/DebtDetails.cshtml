@model IOU.Web.Models.ViewModels.LenderDebtDetailsViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Debt Details";
}

<div class="student-dashboard">
    <!-- DebtDetails.cshtml -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Debt Details</h1>
        <div>
            <a asp-action="Dashboard" class="btn btn-outline-secondary">Back to Dashboard</a>
            <a asp-action="CreateDispute" asp-controller="Student" asp-route-debtId="@Model.Debt.Id" class="btn btn-danger ms-2">
                Dispute This Debt
            </a>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="student-card student-card__header p-3">
                <div class="student-debt-card__label text-white">Total Paid</div>
                <div class="student-debt-card__value h4 text-white">@Model.TotalPaid.ToString("C")</div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="student-card student-card__header p-3">
                <div class="student-debt-card__label text-white">Remaining Balance</div>
                <div class="student-debt-card__value h4 text-white">@Model.RemainingBalance.ToString("C")</div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="student-card student-card__header p-3">
                <div class="student-debt-card__label text-white">Payment Progress</div>
                <div class="progress mt-2 bg-white">
                    <div class="progress-bar" role="progressbar"
                         style="width: @Model.PaymentProgress.ToString("0")%"
                         aria-valuenow="@Model.PaymentProgress"
                         aria-valuemin="0"
                         aria-valuemax="100">
                        @Model.PaymentProgress.ToString("0")%
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="student-card student-card__header p-3">
                <div class="student-debt-card__label text-white">Status</div>
                <div class="student-status-badge student-status-badge--@Model.Debt.Status.ToString().ToLower()">
                    @Model.Debt.Status
                </div>
            </div>
        </div>
    </div>

    <!-- Debt Details Card -->
    <div class="student-card mb-4">
        <div class="student-card__header p-3">
            <h5 class="mb-0 text-white">Loan Details</h5>
        </div>
        <div class="p-3">
            <div class="student-debt-card__details">
                <div class="student-debt-card__item">
                    <span class="student-debt-card__label">Principal Amount</span>
                    <span class="student-debt-card__value">@Model.Debt.PrincipalAmount.ToString("C")</span>
                </div>
                <div class="student-debt-card__item">
                    <span class="student-debt-card__label">Interest Rate</span>
                    <span class="student-debt-card__value">@Model.Debt.InterestRate.ToString("0.00")%</span>
                </div>
                <div class="student-debt-card__item">
                    <span class="student-debt-card__label">Due Date</span>
                    <span class="student-debt-card__value">@Model.Debt.DueDate.ToString("d")</span>
                </div>
                <div class="student-debt-card__item">
                    <span class="student-debt-card__label">Payment Frequency</span>
                    <span class="student-debt-card__value">@Model.Debt.CalculationPeriod</span>
                </div>
                <div class="student-debt-card__item">
                    <span class="student-debt-card__label">Lender Name</span>
                    <span class="student-debt-card__value">@Model.Debt.Lender.User.FullName</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Payment Sections -->
    <div class="row">
        <!-- Overdue Payments -->
        <div class="col-md-6">
            <div class="student-card mb-4">
                <div class="student-card__header p-3">
                    <h5 class="mb-0 text-white">Overdue Payments (@Model.OverduePayments.Count)</h5>
                </div>
                <div class="p-3">
                    @if (Model.OverduePayments.Any())
                    {
                        foreach (var payment in Model.OverduePayments)
                        {
                            <div class="student-debt-card__item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <div class="student-debt-card__label">@payment.DueDate.ToString("d")</div>
                                        <div class="student-debt-card__value">@payment.Amount.ToString("C")</div>
                                    </div>
                                    <span class="student-status-badge student-status-badge--@payment.Status.ToString().ToLower()">
                                        @payment.Status
                                    </span>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-muted">No overdue payments</div>
                    }
                </div>
            </div>
        </div>

        <!-- Upcoming Payments -->
        <div class="col-md-6">
            <div class="student-card mb-4">
                <div class="student-card__header p-3">
                    <h5 class="mb-0 text-white">Upcoming Payments (@Model.UpcomingPayments.Count)</h5>
                </div>
                <div class="p-3">
                    @if (Model.UpcomingPayments.Any())
                    {
                        foreach (var payment in Model.UpcomingPayments)
                        {
                            <div class="student-debt-card__item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <div class="student-debt-card__label">@payment.DueDate.ToString("d")</div>
                                        <div class="student-debt-card__value">@payment.Amount.ToString("C")</div>
                                    </div>
                                    <span class="student-status-badge student-status-badge--@payment.Status.ToString().ToLower()">
                                        @payment.Status
                                    </span>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-muted">No upcoming payments</div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Full Payment Schedule Table -->
    <div class="student-card">
        <div class="student-card__header p-3">
            <h5 class="mb-0 text-white">Full Payment Schedule</h5>
        </div>
        <div class="p-3">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Due Date</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in Model.ScheduledPayments.OrderBy(p => p.DueDate))
                        {
                            <tr>
                                <td>@payment.DueDate.ToString("d")</td>
                                <td>@payment.Amount.ToString("C")</td>
                                <td>
                                    <span class="student-status-badge student-status-badge--@payment.Status.ToString().ToLower()">
                                        @payment.Status
                                    </span>
                                </td>
                                <td>
                                    @if (payment == Model.ScheduledPayments.OrderBy(p => p.DueDate).FirstOrDefault(p => p.Status != ScheduledPaymentStatus.Paid))
                                    {
                                        <button type="button" class="btn btn-sm btn-success"
                                                data-bs-toggle="modal"
                                                data-bs-target="#payModal"
                                                data-payment-id="@payment.Id"
                                                data-amount="@payment.Amount">
                                            Pay Installment
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<!-- Payment Modal -->
<div class="modal fade" id="payModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Make M-Pesa Payment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <input type="hidden" id="scheduledPaymentId" />
            <div class="modal-body">
                <form id="mpesaPaymentForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="debtId" value="@Model.Debt.Id" />
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount (KES)</label>
                        <input type="number" class="form-control" id="amount"
                               min="1" step="1" required />
                        <div class="invalid-feedback">Minimum payment is KES 1</div>
                    </div>
                    <div class="mb-3">
                        <label for="phone" class="form-label">M-Pesa Number</label>
                        <input type="tel" class="form-control" id="phone"
                               pattern="^(?:254|\+?254|0)?7[0-9]{8}$"
                               placeholder="2547XXXXXXXX" required />
                        <div class="invalid-feedback">Valid M-Pesa number required</div>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">
                        <span class="submit-text">Initiate Payment</span>
                        <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
                class PaymentManager {
            constructor() {
                this.form = document.getElementById('mpesaPaymentForm');
                if (!this.form) return;

                this.handleSubmit = this.handleSubmit.bind(this);
                this.startPolling = this.startPolling.bind(this);
                this.pollStatus = this.pollStatus.bind(this);

                // Elements
                this.amountInput = document.getElementById('amount');
                this.phoneInput = document.getElementById('phone');
                this.debtIdInput = document.getElementById('debtId');
                this.scheduledPaymentIdInput = document.getElementById('scheduledPaymentId'); // New
                this.submitButton = this.form.querySelector('button[type="submit"]');

                // State
                this.polling = {
                    active: false,
                    attempts: 0,
                    maxAttempts: 25,
                    baseDelay: 3000
                };

                // Event listeners
                this.initializeEventListeners();
            }

            initializeEventListeners() {
                this.form.addEventListener('submit', this.handleSubmit.bind(this));
                this.amountInput?.addEventListener('input', this.validateAmount.bind(this));
                this.phoneInput?.addEventListener('input', this.validatePhone.bind(this));
            }

            // Enhanced validation with installment context
            validateAmount() {
                const enteredAmount = parseFloat(this.amountInput.value);
                const installmentAmount = parseFloat(this.amountInput.dataset.originalAmount || Infinity);

                const valid = enteredAmount >= 1 && enteredAmount <= installmentAmount;
                this.amountInput.classList.toggle('is-invalid', !valid);

                if (enteredAmount > installmentAmount) {
                    this.amountInput.setCustomValidity(`Cannot pay more than ${installmentAmount.toFixed(2)}`);
                } else {
                    this.amountInput.setCustomValidity('');
                }

                return valid;
            }

            validatePhone() {
                const pattern = /^(?:254|\+?254|0)?7\d{8}$/;
                const valid = pattern.test(this.phoneInput.value);
                this.phoneInput.classList.toggle('is-invalid', !valid);
                return valid;
            }
                startPolling(checkoutRequestId) {
            this.polling.active = true;
            this.polling.attempts = 0;
            this.pollStatus(checkoutRequestId);
        }

            async handleSubmit(event) {
                event.preventDefault();
                if (!this.validateForm()) return;

                try {
            this.toggleLoading(true);
            const response = await this.initiatePayment();

            this.showInfo(`Payment request sent. Check your phone to complete payment`);

            // Use bound method reference
            setTimeout(() => this.startPolling(response.checkoutRequestId), 5000);
        } catch (error) {
            this.showError(error.message);
            this.toggleLoading(false);
        }
            }

            validateForm() {
                const isValid = this.validateAmount() && this.validatePhone();
                if (!isValid) this.showError('Please correct the highlighted fields');
                return isValid;
            }

            async initiatePayment() {
                const formData = {
                    debtId: this.debtIdInput.value,
                    scheduledPaymentId: this.scheduledPaymentIdInput.value || null, // Include scheduled payment
                    amount: parseFloat(this.amountInput.value),
                    phoneNumber: this.formatPhone(this.phoneInput.value)
                };

                try {
                    const response = await fetch('/api/payment/initiate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(formData)
                    });

                    const data = await response.json();
                    if (!response.ok) throw new Error(data.Message || 'Payment initiation failed');

                    return data;
                } catch (error) {
                    throw new Error(`Payment failed to start: ${error.message}`);
                }
            }

            // Enhanced polling with error state handling
            async pollStatus(checkoutRequestId) {
                if (!this.polling.active || this.polling.attempts >= this.polling.maxAttempts) {
                    this.toggleLoading(false);
                    this.showInfo("Payment confirmation delayed. Refresh page later to verify.");
                    return;
                }

                try {
                    const response = await fetch(`/api/payment/status/${checkoutRequestId}`);
                    const status = await response.json();

                    if (!response.ok) throw new Error(status.Message || 'Status check failed');

                    if (status.confirmed) {
                        this.handleSuccess(status);
                    } else if (status.status === 'Failed') {
                        throw new Error('Payment failed on mobile device');
                    } else {
                        this.polling.attempts++;
                        setTimeout(() => this.pollStatus(checkoutRequestId), this.getNextDelay());
                    }
                } catch (error) {
                    this.showError(error.message);
                    this.toggleLoading(false);
                }
            }

            // Modified success handler for installment context
            handleSuccess(status) {
                this.showSuccess(`
                    Payment of KES ${status.amount} confirmed!
                    ${status.receipt ? `Receipt: ${status.receipt}` : ''}
                `);

                // Refresh or update UI
                if (this.scheduledPaymentIdInput.value) {
                    // Update specific installment UI if needed
                    document.querySelector(`[data-payment-id="${this.scheduledPaymentIdInput.value}"]`)
                        ?.closest('tr').classList.add('table-success');
                }

                setTimeout(() => window.location.reload(), 3000);
            }

            // Utility methods
            formatPhone(phone) {
                return phone.replace(/^0/, '254').replace(/\D/g, '');
            }

            toggleLoading(loading) {
                this.submitButton.disabled = loading;
                this.submitButton.querySelector('.submit-text').classList.toggle('d-none', loading);
                this.submitButton.querySelector('.spinner-border').classList.toggle('d-none', !loading);
            }

            getNextDelay() {
                return Math.min(this.polling.baseDelay * Math.pow(1.5, this.polling.attempts), 30000);
            }

            showToast(type, message) {
                const toast = new bootstrap.Toast(document.createElement('div'), {
                    autohide: true,
                    delay: 5000
                });

                toast._element.className = `toast align-items-center text-white bg-${type} border-0`;
                toast._element.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>`;

                document.getElementById('toastContainer').appendChild(toast._element);
                toast.show();
            }

            showError(message) { this.showToast('danger', message); }
            showSuccess(message) { this.showToast('success', message); }
            showInfo(message) { this.showToast('info', message); }
        }

        // Modal initialization with installment binding
        document.addEventListener('DOMContentLoaded', () => {
            const payModal = document.getElementById('payModal');
            let paymentManager;

            payModal?.addEventListener('show.bs.modal', event => {
                const button = event.relatedTarget;
                paymentManager = new PaymentManager();

                // Set installment context
                if (button.dataset.paymentId) {
                    document.getElementById('scheduledPaymentId').value = button.dataset.paymentId;
                    document.getElementById('amount').dataset.originalAmount = button.dataset.amount;
                    document.getElementById('amount').value = parseFloat(button.dataset.amount).toFixed(2);
                }
            });

            payModal?.addEventListener('hidden.bs.modal', () => {
                if (paymentManager) {
                    paymentManager.polling.active = false;
                    document.getElementById('scheduledPaymentId').value = '';
                    document.getElementById('amount').removeAttribute('data-original-amount');
                }
            });
        });
    </script>
}